Task1:
import os
import time
import threading

# Create a semaphore with a value of 0
semaphore = threading.Semaphore(0)

def child_process_1():
    print("Child process 1 is running")
    # Do some work
    time.sleep(5)
    print("Child process 1 is done")
    # Release the semaphore
    semaphore.release()

def child_process_2():
    print("Child process 2 is running")
    # Do some work
    time.sleep(3)
    print("Child process 2 is done")

def child_process_3():
    print("Child process 3 is waiting for child process 1 to finish")
    # Acquire the semaphore
    semaphore.acquire()
    print("Child process 3 is running")
    # Do some work
    time.sleep(2)
    print("Child process 3 is done")

# Create the first child process
pid = os.fork()
if pid == 0:
    child_process_1()
    os._exit(0)

# Create the second child process
pid = os.fork()
if pid == 0:
    child_process_2()
    os._exit(0)

# Create the third child process
pid = os.fork()
if pid == 0:
    child_process_3()
    os._exit(0)

# Wait for all child processes to finish
os.waitpid(-1, 0)
os.waitpid(-1, 0)
os.waitpid(-1, 0)
print("All child processes are done")

Task2:
implementation of the producer-consumer problem using semaphores in Python:


import threading
import time

# buffer size
buffer_size = 5
# buffer
buffer = [None] * buffer_size
# counter
counter = 0
# mutex semaphore
mutex = threading.Semaphore(1)
# empty semaphore
empty = threading.Semaphore(buffer_size)
# full semaphore
full = threading.Semaphore(0)

def producer():
    global counter
    for i in range(20):
        # acquire empty semaphore
        empty.acquire()
        # acquire mutex semaphore
        mutex.acquire()
        # add item to buffer
        buffer[counter] = i
        print("Producer: {} added to buffer at index {}".format(i, counter))
        counter = (counter + 1) % buffer_size
        # release mutex semaphore
        mutex.release()
        # release full semaphore
        full.release()
        time.sleep(1)

def consumer():
    global counter
    for i in range(20):
        # acquire full semaphore
        full.acquire()
        # acquire mutex semaphore
        mutex.acquire()
        # remove item from buffer
        item = buffer[counter]
        print("Consumer: {} removed from buffer at index {}".format(item, counter))
        buffer[counter] = None
        counter = (counter + 1) % buffer_size
        # release mutex semaphore
        mutex.release()
        # release empty semaphore
        empty.release()
        time.sleep(2)

# create producer and consumer threads
p = threading.Thread(target=producer)
c = threading.Thread(target=consumer)

# start producer and consumer threads
p.start()
c.start()

# wait for producer and consumer threads to finish
p.join()
c.join()

# final buffer state
print("Final buffer state:", buffer)


Task3:
import multiprocessing
import random

def calc_square(numbers, result, start_index):
    for i in range(len(numbers)):
        result[start_index + i] = numbers[i] ** 2
        print(f"Process calculated square of {numbers[i]} as {result[start_index + i]}")

if _name_ == '_main_':
    numbers = [random.randint(0, 10) for _ in range(10)]
    result = multiprocessing.Array('i', [0] * 10)
    process1 = multiprocessing.Process(target=calc_square, args=(numbers[:5], result, 0))
    process2 = multiprocessing.Process(target=calc_square, args=(numbers[5:], result, 5))

    process1.start()
    process2.start()

    process1.join()
    process2.join()

    print("Squared numbers:", result[:])

Task4:
import multiprocessing

def update_value(value, id):
    for i in range(1,5):
        value.value = value.value + i
        print(f"Process {id} updated value to {value.value}")

if _name_ == '_main_':
    value = multiprocessing.Value('i', 0)
    processes = [multiprocessing.Process(target=update_value, args=(value, i)) for i in range(1, 5)]

    for process in processes:
        process.start()

    for process in processes:
        process.join()

    print(f"Final value: {value.value}")